# -*- coding: utf-8 -*-
"""Military_VLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17n_wH8rDNM7-IzoATkYHzlDXn7yPj22a
"""


from google.colab import drive
drive.mount('/content/drive')

# Drive klasörünü
base_dir = "/content/drive/MyDrive"

# GPU Kontrolü
import torch

print(f"CUDA available     : {torch.cuda.is_available()}")
print(f"CUDA device count  : {torch.cuda.device_count()}")
if torch.cuda.is_available():
    print(f"CUDA device name   : {torch.cuda.get_device_name(0)}")

# Gerekli kütüphaneler
!pip install -q kaggle
!pip install -q transformers datasets
!pip install -q Pillow opencv-python matplotlib seaborn
!pip install -q wandb gradio
!pip install -q timm albumentations
!pip install -q scikit-learn tqdm

print("Tüm kütüphaneler kuruldu")

# Commented out IPython magic to ensure Python compatibility.
import os
os.environ['KAGGLE_USERNAME'] = ""
os.environ['KAGGLE_KEY'] = ""

# %pip install -U transformers accelerate --quiet

!kaggle datasets download -d kadirkrtls/tez-set-v1
!unzip -o -q tez-set-v1.zip -d ./military_dataset

for root, dirs, files in os.walk("/content/military_dataset", topdown=True):
    print(root)
    for name in dirs:
        print(name)
    for name in files[:5]:
        print(name)
    break

# Veri Analizi
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import glob
from collections import Counter
import json
import random
from pathlib import Path
from collections import defaultdict

# Veri seti klasörü
data_dirs = [d for d in os.listdir('.') if os.path.isdir(d) and 'tez' in d.lower()]
if data_dirs:
    data_path = data_dirs[0]
    print(f"Veri seti klasörü: {data_path}")
else:
    data_path = "/content/military_dataset/Veri-Kumesi_V1-100"

# Görsel dosyalarını bul
image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
all_images = []
for ext in image_extensions:
    all_images.extend(glob.glob(f"{data_path}/**/{ext}", recursive=True))

print(f"Toplam görsel sayısı: {len(all_images)}")

# Sınıf Analizi
class_counts = {}
class_images = {}

for img_path in all_images:
    # Klasör yapısından sınıf ismini çıkar
    path_parts = img_path.split('/')
    if len(path_parts) >= 2:
        class_name = path_parts[-2]
        if class_name not in class_counts:
            class_counts[class_name] = 0
            class_images[class_name] = []
        class_counts[class_name] += 1
        class_images[class_name].append(img_path)

print(f"Toplam sınıf sayısı: {len(class_counts)}")
print("Sınıf dağılımı:")
sorted_classes = sorted(class_counts.items(), key=lambda x: x[1], reverse=True)
for class_name, count in sorted_classes[:10]:
    print(f"  {class_name}: {count} görsel")
print("...")

aircraft_info = {
    'F16': {
        'name': 'F-16 Fighting Falcon',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'ABD',
        'role': 'Hava-Hava ve Hava-Yer',
        'crew': '1 kişi',
        'speed': '2120 km/h',
        'features': ['Çok yönlü platform', 'Side-stick kontrol', 'Fly-by-wire'],
        'category': 'fighter'
    },

    'F22': {
        'name': 'F-22 Raptor',
        'type': '5. Nesil Savaş Uçağı',
        'country': 'ABD',
        'role': 'Hava Üstünlüğü',
        'crew': '1 kişi',
        'speed': '2414 km/h',
        'features': ['Stealth teknolojisi', 'Supercruise', 'Thrust vectoring'],
        'category': 'fighter'
    },

    'F35': {
        'name': 'F-35 Lightning II',
        'type': '5. Nesil Çok Amaçlı Savaş Uçağı',
        'country': 'ABD',
        'role': 'Çok Amaçlı',
        'crew': '1 kişi',
        'speed': '1930 km/h',
        'features': ['Stealth', 'Sensor fusion', 'Vertical landing (B variant)'],
        'category': 'fighter'
    },

    'F18': {
        'name': 'F/A-18 Hornet/Super Hornet',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'ABD',
        'role': 'Hava-Hava ve Hava-Yer',
        'crew': '1-2 kişi',
        'speed': '1915 km/h',
        'features': ['Çift motor', 'Carrier capable', 'All-weather'],
        'category': 'fighter'
    },

    'F15': {
        'name': 'F-15 Eagle',
        'type': 'Hava Üstünlüğü Savaşçısı',
        'country': 'ABD',
        'role': 'Hava-Hava',
        'crew': '1-2 kişi',
        'speed': '2655 km/h',
        'features': ['Çift motor', 'Yüksek itki/ağırlık oranı', 'Look-down/shoot-down radar'],
        'category': 'fighter'
    },

    'F14': {
        'name': 'F-14 Tomcat',
        'type': 'İnterceptor Savaş Uçağı',
        'country': 'ABD',
        'role': 'Hava Savunması',
        'crew': '2 kişi',
        'speed': '2485 km/h',
        'features': ['Variable-sweep wing', 'Phoenix füze', 'Long-range radar'],
        'category': 'fighter'
    },

    'F4': {
        'name': 'F-4 Phantom II',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'ABD',
        'role': 'Hava-Hava ve Hava-Yer',
        'crew': '2 kişi',
        'speed': '2370 km/h',
        'features': ['Çift motor', 'Heavy payload', 'All-weather capability'],
        'category': 'fighter'
    },

    'F117': {
        'name': 'F-117 Nighthawk',
        'type': 'Stealth Taarruz Uçağı',
        'country': 'ABD',
        'role': 'Gizli Taarruz',
        'crew': '1 kişi',
        'speed': '1040 km/h',
        'features': ['İlk stealth savaşçı', 'Precision strike', 'Radar kaçınım'],
        'category': 'attack'
    },

    'A10': {
        'name': 'A-10 Thunderbolt II',
        'type': 'Yakın Hava Desteği',
        'country': 'ABD',
        'role': 'CAS/Tank Avcısı',
        'crew': '1 kişi',
        'speed': '706 km/h',
        'features': ['30mm GAU-8 topu', 'Titanium armor', 'Tank killer'],
        'category': 'attack'
    },

    'AV8B': {
        'name': 'AV-8B Harrier II',
        'type': 'V/STOL Saldırı Uçağı',
        'country': 'ABD/İngiltere',
        'role': 'Yakın Hava Desteği',
        'crew': '1 kişi',
        'speed': '1085 km/h',
        'features': ['Vertical takeoff', 'STOVL capability', 'Marine operations'],
        'category': 'attack'
    },

    'B52': {
        'name': 'B-52 Stratofortress',
        'type': 'Stratejik Bombardıman Uçağı',
        'country': 'ABD',
        'role': 'Uzun Menzilli Bombardıman',
        'crew': '5 kişi',
        'speed': '1047 km/h',
        'features': ['8 turbojet motor', 'Massive payload', 'Long endurance'],
        'category': 'bomber'
    },

    'B2': {
        'name': 'B-2 Spirit',
        'type': 'Stealth Bombardıman Uçağı',
        'country': 'ABD',
        'role': 'Stratejik Bombardıman',
        'crew': '2 kişi',
        'speed': '1010 km/h',
        'features': ['Flying wing design', 'Stealth coating', 'Nuclear capable'],
        'category': 'bomber'
    },

    'B1': {
        'name': 'B-1B Lancer',
        'type': 'Süpersonik Bombardıman Uçağı',
        'country': 'ABD',
        'role': 'Uzun Menzilli Bombardıman',
        'crew': '4 kişi',
        'speed': '1334 km/h',
        'features': ['Variable-sweep wing', 'Large payload', 'Low-level penetration'],
        'category': 'bomber'
    },

    'B21': {
        'name': 'B-21 Raider',
        'type': '6. Nesil Stealth Bombardıman',
        'country': 'ABD',
        'role': 'Stratejik Bombardıman',
        'crew': '2 kişi',
        'speed': 'Gizli',
        'features': ['Next-gen stealth', 'B-2 replacement', 'Advanced materials'],
        'category': 'bomber'
    },

    'C130': {
        'name': 'C-130 Hercules',
        'type': 'Taktik Nakliye Uçağı',
        'country': 'ABD',
        'role': 'Kargo/Nakliye',
        'crew': '5 kişi',
        'speed': '592 km/h',
        'features': ['STOL capability', 'Versatile platform', 'Global workhorse'],
        'category': 'transport'
    },

    'C17': {
        'name': 'C-17 Globemaster III',
        'type': 'Stratejik Nakliye Uçağı',
        'country': 'ABD',
        'role': 'Ağır Kargo',
        'crew': '3 kişi',
        'speed': '830 km/h',
        'features': ['Heavy lift', 'STOL on short runways', 'Reverse thrust'],
        'category': 'transport'
    },

    'C5': {
        'name': 'C-5 Galaxy',
        'type': 'Süper Ağır Nakliye Uçağı',
        'country': 'ABD',
        'role': 'Stratejik Kargo',
        'crew': '7 kişi',
        'speed': '908 km/h',
        'features': ['Massive cargo hold', 'Drive-through loading', 'Intercontinental range'],
        'category': 'transport'
    },

    'KC135': {
        'name': 'KC-135 Stratotanker',
        'type': 'Hava-Hava Yakıt İkmali',
        'country': 'ABD',
        'role': 'Tanker',
        'crew': '4 kişi',
        'speed': '933 km/h',
        'features': ['Flying boom system', 'Global reach', 'Multi-point refueling'],
        'category': 'tanker'
    },

    'E2': {
        'name': 'E-2 Hawkeye',
        'type': 'Erken Uyarı Uçağı',
        'country': 'ABD',
        'role': 'AEW&C',
        'crew': '5 kişi',
        'speed': '626 km/h',
        'features': ['Rotating radar dome', 'Carrier-based', 'Command & control'],
        'category': 'awacs'
    },

    'E7': {
        'name': 'E-7 Wedgetail',
        'type': 'AWACS Uçağı',
        'country': 'Avustralya/ABD',
        'role': 'Havacılık Kontrolü',
        'crew': '6-10 kişi',
        'speed': '853 km/h',
        'features': ['MESA radar', '360° coverage', 'Battle management'],
        'category': 'awacs'
    },

    'U2': {
        'name': 'U-2 Dragon Lady',
        'type': 'Yüksek İrtifa Keşif',
        'country': 'ABD',
        'role': 'İstihbarat/Keşif',
        'crew': '1 kişi',
        'speed': '805 km/h',
        'features': ['Extreme altitude', 'Long endurance', 'Advanced sensors'],
        'category': 'reconnaissance'
    },

    'US2': {
        'name': 'US-2 ShinMaywa',
        'type': 'Amfibi Kurtarma Uçağı',
        'country': 'Japonya',
        'role': 'Deniz Kurtarma',
        'crew': '11 kişi',
        'speed': '560 km/h',
        'features': ['STOL on water', 'High waves landing', 'Search & rescue'],
        'category': 'maritime'
    },

    'SR71': {
        'name': 'SR-71 Blackbird',
        'type': 'Stratejik Keşif Uçağı',
        'country': 'ABD',
        'role': 'Yüksek Hız Keşif',
        'crew': '2 kişi',
        'speed': '3530 km/h',
        'features': ['Mach 3+ capability', 'Titanium construction', 'Ramjet engines'],
        'category': 'reconnaissance'
    },

    'XB70': {
        'name': 'XB-70 Valkyrie',
        'type': 'Deneysel Süpersonik Bombardıman',
        'country': 'ABD',
        'role': 'Araştırma/Test',
        'crew': '2 kişi',
        'speed': '3309 km/h',
        'features': ['Mach 3 capability', 'Delta wing', 'Canard configuration'],
        'category': 'bomber'
    },

    'YF23': {
        'name': 'YF-23 Black Widow II',
        'type': 'Deneysel Stealth Savaşçı',
        'country': 'ABD',
        'role': 'Prototip',
        'crew': '1 kişi',
        'speed': '2655 km/h',
        'features': ['Advanced stealth', 'F-22 competitor', 'Diamond wing'],
        'category': 'experimental'
    },

    'V22': {
        'name': 'V-22 Osprey',
        'type': 'Tiltrotor Uçağı',
        'country': 'ABD',
        'role': 'Taktik Nakliye',
        'crew': '4 kişi',
        'speed': '565 km/h',
        'features': ['VTOL capability', 'Tiltrotor design', 'Marine operations'],
        'category': 'transport'
    },

    'RQ4': {
        'name': 'RQ-4 Global Hawk',
        'type': 'İnsansız Keşif Uçağı',
        'country': 'ABD',
        'role': 'HALE UAV',
        'crew': 'İnsansız',
        'speed': '629 km/h',
        'features': ['High altitude', 'Long endurance', 'Global surveillance'],
        'category': 'drone'
    },

    'MQ9': {
        'name': 'MQ-9 Reaper',
        'type': 'Silahlı İnsansız Hava Aracı',
        'country': 'ABD',
        'role': 'MALE UAV',
        'crew': 'İnsansız',
        'speed': '482 km/h',
        'features': ['Precision strike', 'Long endurance', 'Multi-mission'],
        'category': 'drone'
    },

    'UH60': {
        'name': 'UH-60 Black Hawk',
        'type': 'Çok Amaçlı Helikopter',
        'country': 'ABD',
        'role': 'Nakliye/Taarruz',
        'crew': '4 kişi',
        'speed': '295 km/h',
        'features': ['Twin engine', 'All-weather', 'Multi-role platform'],
        'category': 'helicopter'
    },

    'AH64': {
        'name': 'AH-64 Apache',
        'type': 'Taarruz Helikopteri',
        'country': 'ABD',
        'role': 'Anti-tank/CAS',
        'crew': '2 kişi',
        'speed': '365 km/h',
        'features': ['Hellfire missiles', 'Chain gun', 'Night vision'],
        'category': 'helicopter'
    },

    'CH47': {
        'name': 'CH-47 Chinook',
        'type': 'Ağır Nakliye Helikopteri',
        'country': 'ABD',
        'role': 'Kargo/Nakliye',
        'crew': '3 kişi',
        'speed': '315 km/h',
        'features': ['Tandem rotor', 'Heavy lift', 'High altitude capability'],
        'category': 'helicopter'
    },

    'EF2000': {
        'name': 'Eurofighter Typhoon',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'Avrupa (İngiltere/Almanya/İtalya/İspanya)',
        'role': 'Hava Üstünlüğü',
        'crew': '1-2 kişi',
        'speed': '2495 km/h',
        'features': ['Canard delta wing', 'Supercruise', 'Multi-national project'],
        'category': 'fighter'
    },

    'Rafale': {
        'name': 'Dassault Rafale',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'Fransa',
        'role': 'Omnirole',
        'crew': '1-2 kişi',
        'speed': '2223 km/h',
        'features': ['Canard delta', 'Carrier capable', 'Nuclear capable'],
        'category': 'fighter'
    },

    'Mirage2000': {
        'name': 'Mirage 2000',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'Fransa',
        'role': 'İnterceptor/Taarruz',
        'crew': '1-2 kişi',
        'speed': '2336 km/h',
        'features': ['Delta wing', 'Fly-by-wire', 'Multi-variant family'],
        'category': 'fighter'
    },

    'Tornado': {
        'name': 'Panavia Tornado',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'İngiltere/Almanya/İtalya',
        'role': 'IDS/ADV',
        'crew': '2 kişi',
        'speed': '2338 km/h',
        'features': ['Variable-sweep wing', 'All-weather', 'Multi-national'],
        'category': 'attack'
    },

    'Vulcan': {
        'name': 'Avro Vulcan',
        'type': 'Stratejik Bombardıman Uçağı',
        'country': 'İngiltere',
        'role': 'Nükleer Bombardıman',
        'crew': '5 kişi',
        'speed': '1038 km/h',
        'features': ['Delta wing', 'V-bomber', 'Nuclear deterrent'],
        'category': 'bomber'
    },

    'A400M': {
        'name': 'Airbus A400M Atlas',
        'type': 'Taktik Nakliye Uçağı',
        'country': 'Avrupa',
        'role': 'Taktik Airlift',
        'crew': '3-4 kişi',
        'speed': '780 km/h',
        'features': ['Turboprop', 'STOL capability', 'Multi-national program'],
        'category': 'transport'
    },

    'JAS39': {
        'name': 'Saab JAS 39 Gripen',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'İsveç',
        'role': 'Multi-role',
        'crew': '1-2 kişi',
        'speed': '2204 km/h',
        'features': ['Canard delta', 'STOL capability', 'Cost-effective'],
        'category': 'fighter'
    },

    'Su57': {
        'name': 'Sukhoi Su-57',
        'type': '5. Nesil Savaş Uçağı',
        'country': 'Rusya',
        'role': 'Hava Üstünlüğü',
        'crew': '1 kişi',
        'speed': '2120 km/h',
        'features': ['Stealth technology', 'Supermaneuverability', '5th generation'],
        'category': 'fighter'
    },

    'Su34': {
        'name': 'Sukhoi Su-34',
        'type': 'Savaş Bombardıman Uçağı',
        'country': 'Rusya',
        'role': 'Strike Fighter',
        'crew': '2 kişi',
        'speed': '1900 km/h',
        'features': ['Side-by-side seating', 'Long range', 'All-weather'],
        'category': 'fighter'
    },

    'Su25': {
        'name': 'Sukhoi Su-25',
        'type': 'Yakın Hava Desteği',
        'country': 'Rusya',
        'role': 'CAS/Ground Attack',
        'crew': '1 kişi',
        'speed': '975 km/h',
        'features': ['Armored cockpit', 'Rugged design', 'Tank buster'],
        'category': 'attack'
    },

    'Su24': {
        'name': 'Sukhoi Su-24',
        'type': 'Taarruz Uçağı',
        'country': 'Rusya',
        'role': 'Strike/Bomber',
        'crew': '2 kişi',
        'speed': '1654 km/h',
        'features': ['Variable-sweep wing', 'All-weather', 'Terrain following'],
        'category': 'attack'
    },

    'Mig31': {
        'name': 'Mikoyan MiG-31',
        'type': 'İnterceptor Savaş Uçağı',
        'country': 'Rusya',
        'role': 'Long-range Interceptor',
        'crew': '2 kişi',
        'speed': '3000 km/h',
        'features': ['High altitude', 'Long-range radar', 'Mach 2.8+ capable'],
        'category': 'fighter'
    },

    'Mig29': {
        'name': 'Mikoyan MiG-29',
        'type': 'Hava Üstünlüğü Savaşçısı',
        'country': 'Rusya',
        'role': 'Air Superiority',
        'crew': '1-2 kişi',
        'speed': '2445 km/h',
        'features': ['Twin engine', 'High maneuverability', 'Short runway capability'],
        'category': 'fighter'
    },

    'Tu160': {
        'name': 'Tupolev Tu-160',
        'type': 'Stratejik Bombardıman Uçağı',
        'country': 'Rusya',
        'role': 'Strategic Bomber',
        'crew': '4 kişi',
        'speed': '2220 km/h',
        'features': ['Variable-sweep wing', 'Supersonic capability', 'Nuclear capable'],
        'category': 'bomber'
    },

    'Tu95': {
        'name': 'Tupolev Tu-95',
        'type': 'Stratejik Bombardıman Uçağı',
        'country': 'Rusya',
        'role': 'Long-range Bomber',
        'crew': '7 kişi',
        'speed': '925 km/h',
        'features': ['Turboprop power', 'Contra-rotating props', 'Long endurance'],
        'category': 'bomber'
    },

    'Tu22M': {
        'name': 'Tupolev Tu-22M',
        'type': 'Süpersonik Bombardıman Uçağı',
        'country': 'Rusya',
        'role': 'Medium Bomber',
        'crew': '4 kişi',
        'speed': '2300 km/h',
        'features': ['Variable-sweep wing', 'Maritime strike', 'Nuclear capable'],
        'category': 'bomber'
    },

    'Mi28': {
        'name': 'Mil Mi-28',
        'type': 'Taarruz Helikopteri',
        'country': 'Rusya',
        'role': 'Attack Helicopter',
        'crew': '2 kişi',
        'speed': '324 km/h',
        'features': ['Day/night capability', 'Anti-tank missiles', 'Armored cockpit'],
        'category': 'helicopter'
    },

    'Mi24': {
        'name': 'Mil Mi-24 Hind',
        'type': 'Taarruz/Nakliye Helikopteri',
        'country': 'Rusya',
        'role': 'Attack/Transport',
        'crew': '2-3 kişi',
        'speed': '335 km/h',
        'features': ['Flying tank', 'Troop transport', 'Heavy armament'],
        'category': 'helicopter'
    },

    'Ka52': {
        'name': 'Kamov Ka-52',
        'type': 'Taarruz Helikopteri',
        'country': 'Rusya',
        'role': 'Attack/Reconnaissance',
        'crew': '2 kişi',
        'speed': '300 km/h',
        'features': ['Coaxial rotors', 'Ejection seats', 'All-weather'],
        'category': 'helicopter'
    },

    'Ka27': {
        'name': 'Kamov Ka-27',
        'type': 'Denizcilik Helikopteri',
        'country': 'Rusya',
        'role': 'ASW/Transport',
        'crew': '3 kişi',
        'speed': '270 km/h',
        'features': ['Coaxial rotors', 'Ship-based', 'Anti-submarine'],
        'category': 'helicopter'
    },

    'An225': {
        'name': 'Antonov An-225 Mriya',
        'type': 'Süper Ağır Nakliye Uçağı',
        'country': 'Ukrayna',
        'role': 'Cargo Transport',
        'crew': '6 kişi',
        'speed': '850 km/h',
        'features': ['World\'s largest aircraft', '6 engines', 'Destroyed in 2022'],
        'category': 'transport'
    },

    'An124': {
        'name': 'Antonov An-124',
        'type': 'Ağır Nakliye Uçağı',
        'country': 'Ukrayna/Rusya',
        'role': 'Heavy Cargo',
        'crew': '6 kişi',
        'speed': '865 km/h',
        'features': ['Drive-through loading', 'Global reach', 'Commercial use'],
        'category': 'transport'
    },

    'An72': {
        'name': 'Antonov An-72',
        'type': 'Kısa Mesafe Nakliye',
        'country': 'Ukrayna',
        'role': 'STOL Transport',
        'crew': '3 kişi',
        'speed': '705 km/h',
        'features': ['STOL capability', 'High wing', 'Rough field operations'],
        'category': 'transport'
    },

    'An22': {
        'name': 'Antonov An-22',
        'type': 'Ağır Nakliye Uçağı',
        'country': 'Ukrayna/Rusya',
        'role': 'Heavy Transport',
        'crew': '5-6 kişi',
        'speed': '740 km/h',
        'features': ['Turboprop', 'Large cargo hold', 'Strategic airlift'],
        'category': 'transport'
    },

    'J20': {
        'name': 'Chengdu J-20',
        'type': '5. Nesil Savaş Uçağı',
        'country': 'Çin',
        'role': 'Stealth Fighter',
        'crew': '1 kişi',
        'speed': '2100 km/h',
        'features': ['Stealth technology', 'Canard design', 'Long range'],
        'category': 'fighter'
    },

    'J10': {
        'name': 'Chengdu J-10',
        'type': 'Çok Amaçlı Savaş Uçağı',
        'country': 'Çin',
        'role': 'Multi-role Fighter',
        'crew': '1-2 kişi',
        'speed': '2327 km/h',
        'features': ['Canard delta wing', 'Fly-by-wire', 'Indigenous design'],
        'category': 'fighter'
    },

    'JH7': {
        'name': 'Xian JH-7',
        'type': 'Savaş Bombardıman Uçağı',
        'country': 'Çin',
        'role': 'Fighter-Bomber',
        'crew': '2 kişi',
        'speed': '1808 km/h',
        'features': ['Twin engine', 'All-weather', 'Anti-ship missiles'],
        'category': 'fighter'
    },

    'JF17': {
        'name': 'CAC/PAC JF-17',
        'type': 'Hafif Savaş Uçağı',
        'country': 'Çin/Pakistan',
        'role': 'Multi-role Fighter',
        'crew': '1 kişi',
        'speed': '1975 km/h',
        'features': ['Cost-effective', 'Export oriented', 'Multi-national project'],
        'category': 'fighter'
    },

    'Y20': {
        'name': 'Xian Y-20',
        'type': 'Stratejik Nakliye Uçağı',
        'country': 'Çin',
        'role': 'Military Transport',
        'crew': '3 kişi',
        'speed': '830 km/h',
        'features': ['Large cargo capacity', 'High wing', 'Strategic airlift'],
        'category': 'transport'
    },

    'H6': {
        'name': 'Xian H-6',
        'type': 'Stratejik Bombardıman Uçağı',
        'country': 'Çin',
        'role': 'Long-range Bomber',
        'crew': '6 kişi',
        'speed': '1050 km/h',
        'features': ['Tu-16 derivative', 'Cruise missiles', 'Nuclear capable'],
        'category': 'bomber'
    },

    'Z19': {
        'name': 'Harbin Z-19',
        'type': 'Hafif Taarruz Helikopteri',
        'country': 'Çin',
        'role': 'Attack/Reconnaissance',
        'crew': '2 kişi',
        'speed': '280 km/h',
        'features': ['Tandem cockpit', 'Anti-tank missiles', 'Fenestron tail'],
        'category': 'helicopter'
    },

    'WZ7': {
        'name': 'Guizhou WZ-7',
        'type': 'Yüksek İrtifa İHA',
        'country': 'Çin',
        'role': 'HALE UAV',
        'crew': 'İnsansız',
        'speed': '750 km/h',
        'features': ['High altitude', 'Long endurance', 'Strategic reconnaissance'],
        'category': 'drone'
    },

    'KJ600': {
        'name': 'Xian KJ-600',
        'type': 'Erken Uyarı Uçağı',
        'country': 'Çin',
        'role': 'AEW&C',
        'crew': '4-5 kişi',
        'speed': '650 km/h',
        'features': ['Carrier-based', 'Rotating radar', 'E-2 competitor'],
        'category': 'awacs'
    },

    'C2': {
        'name': 'Kawasaki C-2',
        'type': 'Taktik Nakliye Uçağı',
        'country': 'Japonya',
        'role': 'Military Transport',
        'crew': '3 kişi',
        'speed': '890 km/h',
        'features': ['High-wing design', 'Modern avionics', 'Self-defense systems'],
        'category': 'transport'
    },

    'P3': {
        'name': 'P-3 Orion',
        'type': 'Denizcilik Karakol Uçağı',
        'country': 'ABD',
        'role': 'ASW/Maritime Patrol',
        'crew': '11 kişi',
        'speed': '761 km/h',
        'features': ['Long endurance', 'ASW sensors', 'Turboprop reliability'],
        'category': 'maritime'
    },

    'C390': {
        'name': 'Embraer C-390 Millennium',
        'type': 'Taktik Nakliye Uçağı',
        'country': 'Brezilya',
        'role': 'Military Transport',
        'crew': '3 kişi',
        'speed': '870 km/h',
        'features': ['Jet powered', 'Fly-by-wire', 'C-130 competitor'],
        'category': 'transport'
    },

    'CL415': {
        'name': 'Canadair CL-415',
        'type': 'Amfibi Yangın Söndürme',
        'country': 'Kanada',
        'role': 'Fire Fighting',
        'crew': '2 kişi',
        'speed': '375 km/h',
        'features': ['Water scooping', 'Amphibious', 'Forest fire specialist'],
        'category': 'maritime'
    },

    'Be200': {
        'name': 'Beriev Be-200',
        'type': 'Amfibi Çok Amaçlı',
        'country': 'Rusya',
        'role': 'Fire Fighting/SAR',
        'crew': '2 kişi',
        'speed': '700 km/h',
        'features': ['Jet amphibian', 'Water bombing', 'Search & rescue'],
        'category': 'maritime'
    },

    'AG600': {
        'name': 'AVIC AG600',
        'type': 'Amfibi Çok Amaçlı',
        'country': 'Çin',
        'role': 'Fire Fighting/SAR',
        'crew': '3 kişi',
        'speed': '500 km/h',
        'features': ['World\'s largest amphibian', 'Fire fighting', 'Maritime rescue'],
        'category': 'maritime'
    },

    'KF21': {
        'name': 'KAI KF-21 Boramae',
        'type': '4.5 Nesil Savaş Uçağı',
        'country': 'Güney Kore',
        'role': 'Multi-role Fighter',
        'crew': '1-2 kişi',
        'speed': '1900 km/h',
        'features': ['Semi-stealth', 'AESA radar', 'Indigenous development'],
        'category': 'fighter'
    },

    'TB2': {
        'name': 'Bayraktar TB2',
        'type': 'Silahlı İnsansız Hava Aracı',
        'country': 'Türkiye',
        'role': 'MALE UAV',
        'crew': 'İnsansız',
        'speed': '222 km/h',
        'features': ['Combat proven', 'Precision strikes', 'Export success'],
        'category': 'drone'
    },

    'TB001': {
        'name': 'Bayraktar TB001',
        'type': 'İnsansız Hava Aracı',
        'country': 'Türkiye',
        'role': 'MALE UAV',
        'crew': 'İnsansız',
        'speed': '300 km/h',
        'features': ['Twin boom design', 'Long endurance', 'Multi-mission'],
        'category': 'drone'
    },

    'AKINCI': {
        'name': 'Bayraktar Akıncı',
        'type': 'Ağır Silahlı İHA',
        'country': 'Türkiye',
        'role': 'HALE UAV',
        'crew': 'İnsansız',
        'speed': '360 km/h',
        'features': ['Heavy payload', 'Satellite communication', 'High altitude'],
        'category': 'drone'
    },

    'AKSUNGUR': {
        'name': 'TAI Aksungur',
        'type': 'Çok Amaçlı İHA',
        'country': 'Türkiye',
        'role': 'HALE UAV',
        'crew': 'İnsansız',
        'speed': '250 km/h',
        'features': ['Twin engine', 'Long endurance', 'Modular payload'],
        'category': 'drone'
    },

    'Anka3': {
        'name': 'TAI Anka-3',
        'type': 'Stealth İHA',
        'country': 'Türkiye',
        'role': 'Stealth UAV',
        'crew': 'İnsansız',
        'speed': '700 km/h',
        'features': ['Flying wing design', 'Stealth capability', 'Jet powered'],
        'category': 'drone'
    },

    'KAAN': {
        'name': 'TAI KAAN',
        'type': '5. Nesil Savaş Uçağı',
        'country': 'Türkiye',
        'role': 'Air Superiority',
        'crew': '1 kişi',
        'speed': '1800+ km/h',
        'features': ['Stealth technology', 'Indigenous engine planned', 'Twin engine'],
        'category': 'fighter'
    },

    'HURJET': {
        'name': 'TAI Hürjet',
        'type': 'Jet Eğitim Uçağı',
        'country': 'Türkiye',
        'role': 'Advanced Trainer',
        'crew': '2 kişi',
        'speed': '1400 km/h',
        'features': ['Supersonic capability', 'Glass cockpit', 'Light combat variant'],
        'category': 'trainer'
    },

    'HURKUS': {
        'name': 'TAI Hürkuş',
        'type': 'Turboprop Eğitim Uçağı',
        'country': 'Türkiye',
        'role': 'Basic Trainer',
        'crew': '2 kişi',
        'speed': '574 km/h',
        'features': ['Turboprop trainer', 'Glass cockpit', 'Export oriented'],
        'category': 'trainer'
    },

    'KIZILELMA': {
        'name': 'Bayraktar Kızılelma',
        'type': 'Savaşçı İHA',
        'country': 'Türkiye',
        'role': 'UCAV',
        'crew': 'İnsansız',
        'speed': '900+ km/h',
        'features': ['Fighter-like performance', 'Carrier capable', 'AI integration'],
        'category': 'drone'
    },

    'T-129 ATAK': {
        'name': 'TAI T-129 ATAK',
        'type': 'Taarruz Helikopteri',
        'country': 'Türkiye',
        'role': 'Attack Helicopter',
        'crew': '2 kişi',
        'speed': '281 km/h',
        'features': ['A129 derivative', 'Indigenous systems', 'All-weather capability'],
        'category': 'helicopter'
    }
}

# Soru Şablonları ve Cevap Üreticileri

import random

class QAGenerator:
    def __init__(self, class_images, aircraft_info):
        self.class_images = class_images
        self.aircraft_info = aircraft_info
        self.all_classes = list(class_images.keys())

        # Kategori eşleştirmeleri
        self.category_names = {
            'fighter': 'Savaş Uçağı',
            'bomber': 'Bombardıman Uçağı',
            'attack': 'Saldırı Uçağı',
            'drone': 'İnsansız Hava Aracı',
            'helicopter': 'Helikopter',
            'transport': 'Nakliye Uçağı',
            'reconnaissance': 'Keşif Uçağı',
            'trainer': 'Eğitim Uçağı',
            'interceptor': 'Önleme Uçağı'
        }

    def generate_identification_qa(self, class_name, image_path):
        """Uçak tanımlama soruları"""

        # Temel tanımlama soruları
        basic_questions = [
            "Bu hangi uçak?",
            "Görseldeki uçağın adı nedir?",
            "Bu uçak modelini söyleyebilir misin?",
            "Hangi askeri uçağı görüyoruz?",
            "Bu uçağın adı nedir?",
            "Bu askeri aracın ismini söyler misin?",
            "Fotograftaki uçağın model adı nedir?",
            "Bu hangi model askeri uçak?",
            "Görselde hangi uçak yer alıyor?",
            "Bu uçağın tam adını söyleyebilir misin?",
            "Hangi uçak modelini inceliyoruz?",
            "Bu askeri uçağın adı nedir?",
            "Fotografta görülen uçak hangisi?",
            "Bu hangi tip askeri hava aracı?",
            "Görseldeki askeri uçağın ismini söyle",
            "Bu uçak modeli nedir?",
            "Hangi askeri hava aracını görüyoruz?",
            "Bu uçağın kodunu söyleyebilir misin?"
        ]

        # Özellik bazlı sorular
        property_questions = {
            'type': [
                "Bu uçağın tipi nedir?",
                "Bu askeri aracın türü nedir?",
                "Bu hangi tip askeri araç?",
                "Bu nasıl bir uçak?",
                "Bu uçağın sınıflandırması nedir?",
                "Bu askeri aracın kategorisi nedir?",
                "Bu uçak hangi türde?",
                "Bu nasıl bir askeri araç?",
                "Bu uçağın türü nedir?",
                "Bu hangi sınıf askeri uçak?"
            ],
            'country': [
                "Bu uçak hangi ülkenin?",
                "Bu askeri araç hangi ülke yapımı?",
                "Bu uçağın üretildiği ülke neresi?",
                "Hangi ülkenin askeri uçağını görüyoruz?",
                "Bu uçak hangi ülke menşeili?",
                "Bu askeri aracın kökeni neresi?",
                "Hangi ülke bu uçağı üretiyor?",
                "Bu uçağın menşe ülkesi neresi?",
                "Bu askeri uçak hangi millete ait?",
                "Hangi ülkenin teknolojisi bu uçakta?"
            ],
            'role': [
                "Bu uçağın görevi nedir?",
                "Bu askeri aracın rolü nedir?",
                "Bu uçak ne amaçla kullanılır?",
                "Bu uçağın askeri görevi nedir?",
                "Bu uçağın misyonu nedir?",
                "Bu askeri aracın işlevi nedir?",
                "Bu uçak hangi görevlerde kullanılır?",
                "Bu uçağın operasyonel rolü nedir?",
                "Bu askeri aracın amacı nedir?",
                "Bu uçak ne tür görevler üstlenir?"
            ],
            'crew': [
                "Bu uçakta kaç kişi görev yapar?",
                "Bu uçağın mürettebat sayısı kaçtır?",
                "Bu askeri araçta kaç pilot çalışır?",
                "Bu uçağı kaç kişi kullanır?",
                "Bu uçakta kaç personel bulunur?",
                "Bu uçağın ekip sayısı nedir?",
                "Bu askeri araçta kaç kişi görevli?",
                "Bu uçağı kaç pilot idare eder?",
                "Bu uçakta kaç operatör var?",
                "Bu uçağın personel kapasitesi nedir?"
            ],
            'speed': [
                "Bu uçağın hızı ne kadardır?",
                "Bu askeri aracın maksimum hızı nedir?",
                "Bu uçak ne kadar hızlı uçar?",
                "Bu uçağın sürat kapasitesi nedir?",
                "Bu uçağın azami hızı nedir?",
                "Bu askeri aracın hız performansı nasıl?",
                "Bu uçak saatte kaç kilometre yapar?",
                "Bu uçağın top speed'i nedir?",
                "Bu askeri aracın hız limiti nedir?",
                "Bu uçağın uçuş hızı ne kadardır?"
            ],
            'features': [
                "Bu uçağın önemli özellikleri nelerdir?",
                "Bu askeri aracın dikkat çekici özelliği nedir?",
                "Bu uçağı özel kılan nedir?",
                "Bu uçağın temel karakteristikleri nelerdir?",
                "Bu uçağın ayırt edici özellikleri neler?",
                "Bu askeri aracın teknolojik özelliği nedir?",
                "Bu uçağın üstün yanları nelerdir?",
                "Bu uçağın başlıca özelliği nedir?",
                "Bu askeri aracın gelişmiş özelliği nedir?",
                "Bu uçağın öne çıkan karakteristiği nedir?"
            ],
            'category': [
                "Bu uçak hangi kategoriye girer?",
                "Bu askeri araç hangi sınıfa dahildir?",
                "Bu uçağın kategorisi nedir?",
                "Bu uçak hangi gruba ait?",
                "Bu askeri aracın sınıfı nedir?",
                "Bu uçak hangi tipe dahil?",
                "Bu uçağın askeri kategorisi nedir?",
                "Bu askeri araç hangi platform grubunda?",
                "Bu uçağın operasyonel kategorisi nedir?",
                "Bu uçak hangi sınıflandırmaya girer?"
            ]
        }

        # %60 basic, %40 property soru dağılımı
        if random.random() < 0.6:
            question = random.choice(basic_questions)
            if class_name in self.aircraft_info:
                answer = self.aircraft_info[class_name]['name']
            else:
                answer = class_name
        else:
            # Property kategorisini seç
            prop_category = random.choice(list(property_questions.keys()))
            question = random.choice(property_questions[prop_category])
            answer = self._get_property_answer(class_name, prop_category)

        return question, answer

    def _get_property_answer(self, class_name, property_type):
        """Soru tipine göre doğru cevabı döndür"""
        if class_name not in self.aircraft_info:
            return class_name

        info = self.aircraft_info[class_name]

        if property_type == 'type':
            return info['type']
        elif property_type == 'country':
            return info['country']
        elif property_type == 'role':
            return info['role']
        elif property_type == 'crew':
            return info['crew']
        elif property_type == 'speed':
            return f"Maksimum hızı {info['speed']}"
        elif property_type == 'features':
            features = info['features']
            if len(features) == 1:
                return f"Önemli özelliği: {features[0]}"
            elif len(features) == 2:
                return f"Başlıca özellikleri: {features[0]} ve {features[1]}"
            elif len(features) > 2:
                return f"Başlıca özellikleri: {', '.join(features[:2])} ve {features[2]}"
            else:
                return "Özel tasarım özellikleri bulunmaktadır."
        elif property_type == 'category':
            category = info.get('category', 'unknown')
            return self.category_names.get(category, category)
        else:
            return info['name']

    def generate_property_qa(self, class_name, image_path):
        """Uçak özellik soruları"""
        if class_name not in self.aircraft_info:
            return None, None

        info = self.aircraft_info[class_name]

        # Daha detaylı özellik soruları
        property_questions = {
            'country_detailed': [
                f"Bu {info['name']} hangi ülkenin üretimi?",
                f"Bu uçağın menşe ülkesi neresi?",
                f"{class_name} hangi ülkeye ait?",
                info['country']
            ],
            'type_detailed': [
                f"Bu {info['name']} nasıl bir uçak?",
                f"Bu uçağın askeri sınıfı nedir?",
                f"{class_name} hangi kategoride?",
                info['type']
            ],
            'role_mission': [
                f"Bu {info['name']} hangi görevlerde kullanılır?",
                f"Bu uçağın operasyonel rolü nedir?",
                f"{class_name} ne tür misyonlarda görev alır?",
                info['role']
            ],
            'crew_capacity': [
                f"Bu {info['name']} kaç kişilik?",
                f"Bu uçakta kaç personel görev yapar?",
                f"{class_name} kaç kişi ile uçuyor?",
                info['crew']
            ],
            'speed_performance': [
                f"Bu {info['name']} ne kadar hızlı?",
                f"Bu uçağın performans hızı nedir?",
                f"{class_name} azami kaç hızla uçar?",
                f"Maksimum hızı {info['speed']}"
            ]
        }

        prop = random.choice(list(property_questions.keys()))
        questions = property_questions[prop]
        question = random.choice(questions[:-1])  # Son eleman cevap
        answer = questions[-1]  # Son eleman cevap

        return question, answer

    def generate_comparison_qa(self, class_name, image_path):
        """Karşılaştırma soruları"""
        if class_name not in self.aircraft_info:
            return None, None

        current_info = self.aircraft_info[class_name]
        current_category = current_info.get('category')

        # Farklı karşılaştırma türleri
        comparison_types = ['same_category', 'different_country', 'speed_compare', 'role_compare']
        comp_type = random.choice(comparison_types)

        if comp_type == 'same_category' and current_category:
            # Aynı kategorideki diğer uçaklar
            same_category = [ac for ac, info in self.aircraft_info.items()
                           if info.get('category') == current_category
                           and ac != class_name and ac in self.class_images]

            if same_category:
                other = random.choice(same_category)
                other_info = self.aircraft_info[other]

                questions = [
                    f"Bu {current_info['name']} ile {other_info['name']} arasındaki fark nedir?",
                    f"{class_name} ve {other} karşılaştırıldığında ne görüyoruz?",
                    f"Bu uçak {other_info['name']}'den nasıl ayrılır?",
                    f"{current_info['name']} ile {other_info['name']} arasında hangi farklar var?"
                ]

                question = random.choice(questions)
                answer = f"{current_info['name']} {current_info['country']} yapımı olup {current_info['role']} görevinde kullanılırken, {other_info['name']} {other_info['country']} yapımı olup {other_info['role']} görevinde kullanılır."

                return question, answer

        elif comp_type == 'different_country':
            # Farklı ülkeden uçaklar
            different_country = [ac for ac, info in self.aircraft_info.items()
                               if info.get('country') != current_info['country']
                               and ac != class_name and ac in self.class_images]

            if different_country:
                other = random.choice(different_country)
                other_info = self.aircraft_info[other]

                questions = [
                    f"Bu {current_info['country']} uçağı ile {other_info['country']} uçağı arasındaki fark nedir?",
                    f"{current_info['name']} ve {other_info['name']} hangi ülkelerin teknolojisini temsil eder?"
                ]

                question = random.choice(questions)
                answer = f"Bu {current_info['name']} {current_info['country']} teknolojisi iken, {other_info['name']} {other_info['country']} teknolojisidir."

                return question, answer

        # Varsayılan karşılaştırma
        other_aircraft = [ac for ac in self.aircraft_info.keys()
                         if ac != class_name and ac in self.class_images]

        if other_aircraft:
            other = random.choice(other_aircraft)
            other_info = self.aircraft_info[other]

            question = f"Bu uçak {other_info['name']}'den nasıl farklıdır?"
            answer = f"Bu {current_info['name']} {current_info['type']} kategorisinde iken, {other_info['name']} {other_info['type']} kategorisindedir."

            return question, answer

        return None, None

    def generate_count_qa(self, class_name, image_path):
        """Sayım soruları"""
        count_questions = [
            "Görselde kaç uçak var?",
            "Bu görselde kaç tane askeri araç görünüyor?",
            "Görüntünde kaç adet uçak sayabilirsin?",
            "Fotografta kaç uçak yer alıyor?",
            "Bu görselde kaç askeri hava aracı var?",
            "Görüntüde toplam kaç uçak mevcut?",
            "Bu fotografta kaç tane uçak görüyoruz?",
            "Görselde kaç adet askeri araç bulunuyor?",
            "Bu görüntüde kaç uçak tespit edebilirsin?",
            "Fotograftaki uçak sayısı kaçtır?"
        ]

        count_answers = [
            "1 adet uçak var.",
            "Görselde 1 uçak bulunuyor.",
            "Toplam 1 askeri uçak görünüyor.",
            "Fotografta 1 adet uçak yer alıyor.",
            "Bu görselde 1 tane askeri araç var."
        ]

        question = random.choice(count_questions)
        answer = random.choice(count_answers)

        return question, answer

    def generate_feature_qa(self, class_name, image_path):
        """Özellik detay soruları"""
        if class_name not in self.aircraft_info:
            return None, None

        info = self.aircraft_info[class_name]
        features = info['features']

        if not features:
            return None, None

        # Farklı özellik soru türleri
        feature_question_types = [
            # Genel özellik soruları
            f"Bu {info['name']} uçağının önemli özellikleri nelerdir?",
            f"Bu uçağı özel kılan teknolojik özellikler nelerdir?",
            f"{class_name} modelinin dikkat çekici özellikleri neler?",
            f"Bu {info['name']} uçağının gelişmiş özelliği nedir?",
            f"Bu uçağın ayırt edici karakteristikleri nelerdir?",

            # Spesifik özellik soruları
            f"Bu {info['name']} uçağının en önemli özelliği nedir?",
            f"Bu uçağın teknolojik üstünlüğü nereden geliyor?",
            f"{class_name} modelini diğerlerinden ayıran özellik nedir?",
            f"Bu uçağın operasyonel avantajı nedir?",
            f"Bu {info['name']} uçağının öne çıkan özelliği nedir?"
        ]

        question = random.choice(feature_question_types)

        # Özellik sayısına göre farklı cevap formatları
        if len(features) == 1:
            answer = f"Bu uçağın en önemli özelliği {features[0]}."
        elif len(features) == 2:
            answer = f"Bu uçağın başlıca özellikleri {features[0]} ve {features[1]}."
        elif len(features) == 3:
            answer = f"Bu uçağın önemli özellikleri {features[0]}, {features[1]} ve {features[2]}."
        else:
            # 3'ten fazla özellik varsa ilk 3'ünü al
            answer = f"Bu uçağın başlıca özellikleri {features[0]}, {features[1]} ve {features[2]} gibi özellik seti."

        return question, answer

    def generate_technical_qa(self, class_name, image_path):
        """Teknik detay soruları"""
        if class_name not in self.aircraft_info:
            return None, None

        info = self.aircraft_info[class_name]

        technical_questions = [
            # Performans soruları
            (f"Bu {info['name']} uçağının performans özellikleri nelerdir?",
             f"Maksimum {info['speed']} hızla uçabilen {info['type']} sınıfında bir uçaktır."),

            (f"Bu uçağın operasyonel kapasitesi nasıldır?",
             f"{info['crew']} ile {info['role']} görevlerinde kullanılan etkili bir platformdur."),

            # Kullanım soruları
            (f"Bu {info['name']} hangi durumlarda tercih edilir?",
             f"{info['role']} görevlerinde {info['country']} kuvvetleri tarafından aktif kullanılır."),

            (f"Bu uçağın askeri değeri nedir?",
             f"{info['type']} kategorisinde {info['role']} kabiliyeti ile stratejik öneme sahiptir.")
        ]

        question, answer = random.choice(technical_questions)
        return question, answer

    def generate_contextual_qa(self, class_name, image_path):
        """Bağlamsal sorular"""
        if class_name not in self.aircraft_info:
            return None, None

        info = self.aircraft_info[class_name]

        contextual_questions = [
            # Tarihsel bağlam
            (f"Bu {info['name']} ne zaman geliştirildi?",
             f"Bu {info['country']} menşeli {info['type']} kategorisinde modern bir askeri uçaktır."),

            # Kullanım bağlamı
            (f"Bu uçak hangi koşullarda görev yapar?",
             f"{info['role']} görevlerinde {info['crew']} ile operasyonel faaliyetlerde bulunur."),

            # Stratejik önem
            (f"Bu {info['name']} neden önemlidir?",
             f"{info['country']} hava kuvvetlerinin {info['role']} kabiliyetini güçlendiren önemli bir platformdur.")
        ]

        question, answer = random.choice(contextual_questions)
        return question, answer

# Veri Seti Oluşturma Fonksiyonları

def create_qa_dataset(class_images, aircraft_info, samples_per_class=30):
    """Her sınıf için soru-cevap çiftleri oluşturma"""

    generator = QAGenerator(class_images, aircraft_info)
    qa_dataset = []

    # Ağırlıklar
    question_types = [
        ('identification', 0.35),    # %35 genişletilmiş tanımlama
        ('property', 0.20),          # %20 özellik soruları
        ('comparison', 0.15),        # %15 karşılaştırma
        ('feature', 0.15),           # %15 detaylı özellik
        ('technical', 0.10),         # %10 teknik detay
        ('contextual', 0.05)         # %5 bağlamsal
    ]

    for class_name, images in class_images.items():
        if not images:
            continue

        print(f"Generating QA for {class_name}: {len(images)} images, {samples_per_class} samples")

        for i in range(samples_per_class):
            # Rastgele görsel seç
            image_path = random.choice(images)

            # Soru türünü ağırlıklı olarak seç
            q_type = random.choices(
                [qt[0] for qt in question_types],
                weights=[qt[1] for qt in question_types]
            )[0]

            # Soru-cevap üret
            question, answer = None, None

            if q_type == 'identification':
                question, answer = generator.generate_identification_qa(class_name, image_path)
            elif q_type == 'property':
                question, answer = generator.generate_property_qa(class_name, image_path)
            elif q_type == 'comparison':
                question, answer = generator.generate_comparison_qa(class_name, image_path)
            elif q_type == 'feature':
                question, answer = generator.generate_feature_qa(class_name, image_path)
            elif q_type == 'technical':
                question, answer = generator.generate_technical_qa(class_name, image_path)
            elif q_type == 'contextual':
                question, answer = generator.generate_contextual_qa(class_name, image_path)

            # Geçerli soru-cevap çifti ise ekle
            if question and answer:
                qa_dataset.append({
                    'image_path': image_path,
                    'class_name': class_name,
                    'question': question,
                    'answer': answer,
                    'question_type': q_type,
                    'aircraft_name': aircraft_info.get(class_name, {}).get('name', class_name),
                    'aircraft_category': aircraft_info.get(class_name, {}).get('category', 'unknown')
                })

    print(f"Generated {len(qa_dataset)} QA pairs total")
    return qa_dataset

# İstatistik Soruları

def analyze_qa_dataset(qa_dataset):
    """QA veri setini analiz et"""

    print("QA Dataset Analysis")
    print(f"Total QA pairs: {len(qa_dataset)}")

    # Soru türü dağılımı
    question_types = {}
    for qa in qa_dataset:
        q_type = qa['question_type']
        question_types[q_type] = question_types.get(q_type, 0) + 1

    print("\nQuestion Type Distribution")
    for q_type, count in sorted(question_types.items()):
        percentage = (count / len(qa_dataset)) * 100
        print(f"{q_type}: {count} ({percentage:.1f}%)")

    # Sınıf dağılımı
    class_distribution = {}
    for qa in qa_dataset:
        class_name = qa['class_name']
        class_distribution[class_name] = class_distribution.get(class_name, 0) + 1

    print("\nClass Distribution")
    for class_name, count in sorted(class_distribution.items()):
        print(f"{class_name}: {count} samples")

    # Ortalama soru ve cevap uzunlukları
    question_lengths = [len(qa['question'].split()) for qa in qa_dataset]
    answer_lengths = [len(qa['answer'].split()) for qa in qa_dataset]

    print(f"\Text Statistics")
    print(f"Average question length: {sum(question_lengths)/len(question_lengths):.1f} words")
    print(f"Average answer length: {sum(answer_lengths)/len(answer_lengths):.1f} words")

    return {
        'total_pairs': len(qa_dataset),
        'question_types': question_types,
        'class_distribution': class_distribution,
        'avg_question_length': sum(question_lengths)/len(question_lengths),
        'avg_answer_length': sum(answer_lengths)/len(answer_lengths)
    }

# Veri Seti Oluşturma ve Kaydetme

print("Soru-cevap veri seti oluşturuluyor")

# Veri seti oluştur
qa_data = create_qa_dataset(class_images, aircraft_info, samples_per_class=20)

print(f"Toplam {len(qa_data)} soru-cevap çifti oluşturuldu")

# Train/Val/Test ayrımı yap
random.shuffle(qa_data)
train_size = int(0.7 * len(qa_data))
val_size = int(0.15 * len(qa_data))

train_data = qa_data[:train_size]
val_data = qa_data[train_size:train_size + val_size]
test_data = qa_data[train_size + val_size:]

print(f"Veri dağılımı:")
print(f"Train: {len(train_data)} örnekler")
print(f"Validation: {len(val_data)} örnekler")
print(f"Test: {len(test_data)} örnekler")

# JSON olarak kaydet
datasets = {
    'train': train_data,
    'validation': val_data,
    'test': test_data
}

with open('warfare_qa_dataset.json', 'w', encoding='utf-8') as f:
    json.dump(datasets, f, ensure_ascii=False, indent=2)

# CSV olarak da kaydet
df = pd.DataFrame(qa_data)
df.to_csv('warfare_qa_dataset.csv', index=False, encoding='utf-8')

print("Veri seti dosyaları kaydedildi:")
print("warfare_qa_dataset.json")
print("warfare_qa_dataset.csv")

# Veri Seti İstatistikleri

# Soru türü dağılımı
question_type_counts = pd.Series([item['question_type'] for item in qa_data]).value_counts()
print("Soru türü dağılımı:")
for q_type, count in question_type_counts.items():
    print(f"  {q_type}: {count} ({count/len(qa_data)*100:.1f}%)")

# Sınıf başına örnek sayısı
class_counts = pd.Series([item['class_name'] for item in qa_data]).value_counts()
print(f"Sınıf başına ortalama örnek: {class_counts.mean():.1f}")
print(f"Min: {class_counts.min()}, Max: {class_counts.max()}")

# Örnek soru-cevaplar
print("Örnek Soru-Cevaplar:")
for i, example in enumerate(random.sample(qa_data, 5)):
    print(f"\n{i+1}. Sınıf: {example['class_name']}")
    print(f"   Soru: {example['question']}")
    print(f"   Cevap: {example['answer']}")
    print(f"   Tür: {example['question_type']}")

# Commented out IPython magic to ensure Python compatibility.
# %pip install -q peft accelerate bitsandbytes

def preprocess_function(examples):
    images = [Image.open(img_path).convert("RGB") for img_path in examples['image_path']]

    texts = []
    for question in examples['question']:
        text = "<image> " + question
        texts.append(text)

    # Processor çağrısı
    encoding = processor(text=texts, images=images, padding='max_length', truncation=True, max_length=64, return_tensors="pt")

    # Cevapları tokenize et (labels)
    with processor.tokenizer.as_target_tokenizer():
        labels = processor.tokenizer(examples['answer'], padding='max_length', truncation=True, max_length=64, return_tensors="pt").input_ids

    labels = torch.where(labels == processor.tokenizer.pad_token_id, -100, labels)

    return {
        'input_ids': encoding.input_ids,
        'attention_mask': encoding.attention_mask,
        'pixel_values': encoding.pixel_values,
        'labels': labels
    }

rm -rf /root/.cache/huggingface

from transformers import AutoModelForVision2Seq, AutoProcessor, BitsAndBytesConfig
import torch

model_id = "google/paligemma-3b-mix-224"
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Processor (hem görüntü hem text için)
processor = AutoProcessor.from_pretrained(model_id, use_fast=True)

# 8-bit quantization config
bnb_config = BitsAndBytesConfig(
    load_in_8bit=True,      # 8-bit yükleme
    llm_int8_threshold=6.0  # opsiyonel, default 6.0
)

# Model yükle (8-bit modda)
model = AutoModelForVision2Seq.from_pretrained(
    model_id,
    device_map="auto",
    torch_dtype=torch.float16,
    quantization_config=bnb_config
)

from peft import get_peft_model, LoraConfig, TaskType

# LoRA konfigürasyonu
peft_config = LoraConfig(
    task_type=TaskType.CAUSAL_LM,  # Model ve görevine göre değişebilir
    r=16,
    lora_alpha=32,
    lora_dropout=0.1,
    bias="none",
    target_modules=["q_proj", "k_proj", "v_proj", "o_proj"]  # Modelin dikkat katmanları
)

# Modeli LoRA ile sar
model = get_peft_model(model, peft_config)
model.print_trainable_parameters()

from datasets import Dataset, DatasetDict
import json
from transformers import AutoProcessor
from PIL import Image
import torch

# Veri dosyasını yükle
with open('warfare_qa_dataset.json', 'r', encoding='utf-8') as f:
    raw_data = json.load(f)

# Train, validation, test setlerini ayır
train_data = raw_data['train']
val_data = raw_data['validation']
test_data = raw_data['test']

# Hugging Face Dataset oluştur
train_ds = Dataset.from_list(train_data)
val_ds = Dataset.from_list(val_data)
test_ds = Dataset.from_list(test_data)

# Dataset dict yapısı
dataset = DatasetDict({
    'train': train_ds,
    'validation': val_ds,
    'test': test_ds
})

# Processor yükle (PaliGemma için)
model_id = "google/paligemma-3b-mix-224"
processor = AutoProcessor.from_pretrained(model_id)


# Görsel + metin ön işleme fonksiyonu
def preprocess_function(examples):
    images = [Image.open(img_path).convert("RGB") for img_path in examples['image_path']]
    texts = ["<image> " + question for question in examples['question']]

    # Hem giriş hem de hedef (label) aynı anda tokenize ediliyor
    encoding = processor(
        text=texts,
        images=images,
        text_target=examples['answer'],  # as_target_tokenizer yerine
        padding='max_length',
        truncation=True,
        max_length=256,
        return_tensors="pt"
    )

    labels = encoding["labels"] if "labels" in encoding else encoding["input_ids"]
    labels = torch.where(labels == processor.tokenizer.pad_token_id, -100, labels)

    # Explicitly cast pixel values to float16
    encoding['pixel_values'] = encoding['pixel_values'].to(torch.float16)

    return {
        'input_ids': encoding.input_ids,
        'attention_mask': encoding.attention_mask,
        'pixel_values': encoding.pixel_values,
        'labels': labels
    }

# Datasetlere ön işleme uygula
dataset = dataset.map(preprocess_function, batched=True, batch_size=8)
dataset = dataset.with_format("torch")
print("Veri setleri hazır")
print(dataset)

from transformers import default_data_collator
from torch.utils.data import DataLoader

def data_collator(features):
    batch = {}
    import torch

    pixel_values = [torch.tensor(f['pixel_values']) if not isinstance(f['pixel_values'], torch.Tensor) else f['pixel_values'] for f in features]
    batch['pixel_values'] = torch.stack(pixel_values)

    input_ids = [torch.tensor(f['input_ids']) if not isinstance(f['input_ids'], torch.Tensor) else f['input_ids'] for f in features]
    batch['input_ids'] = torch.stack(input_ids)

    attention_mask = [torch.tensor(f['attention_mask']) if not isinstance(f['attention_mask'], torch.Tensor) else f['attention_mask'] for f in features]
    batch['attention_mask'] = torch.stack(attention_mask)

    labels = [torch.tensor(f['labels']) if not isinstance(f['labels'], torch.Tensor) else f['labels'] for f in features]
    batch['labels'] = torch.stack(labels)

    return batch


train_loader = DataLoader(dataset['train'], batch_size=8, shuffle=True, collate_fn=data_collator)
val_loader = DataLoader(dataset['validation'], batch_size=8, collate_fn=data_collator)

!pip uninstall -y torch torchvision torchaudio && pip install --upgrade pip && pip install torch==2.3.1+cu121 torchvision==0.18.1+cu121 torchaudio==2.3.1 --index-url https://download.pytorch.org/whl/cu121

from transformers import Trainer, TrainingArguments, default_data_collator
import torch
import os

# Google Drive'ı mount et
from google.colab import drive
drive.mount('/content/drive')

# Kaydetme klasörü için base_dir tanımı ekle
base_dir = "/content/drive/MyDrive"

# Kayıt klasörünü
output_dir = './results'
"""
training_args = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=2,
    per_device_eval_batch_size=2,
    gradient_accumulation_steps=4,
    eval_strategy="steps",
    save_strategy="steps",
    eval_steps=1000,
    save_steps=2000,
    num_train_epochs=5,
    learning_rate=5e-5,
    warmup_steps=100,
    weight_decay=0.01,
    logging_steps=25,
    load_best_model_at_end=True,
    save_total_limit=2,
    fp16=True,
    report_to="wandb"
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset['train'],
    eval_dataset=dataset['validation'],
    data_collator=default_data_collator,
    tokenizer=processor.tokenizer,
)
trainer.train()
#trainer.train(resume_from_checkpoint=True)
"""
training_args = TrainingArguments(
   output_dir=output_dir,
   per_device_train_batch_size=2,
   per_device_eval_batch_size=2,
   gradient_accumulation_steps=4,
   eval_strategy="steps",
   save_strategy="steps",
   eval_steps=1000,
   save_steps=2000,
   num_train_epochs=3,  # 5 → 10
   learning_rate=5e-5,   # 5e-5 → 2e-5
   warmup_steps=100,     # 100 → 200
   weight_decay=0.01,
   logging_steps=25,
   load_best_model_at_end=True,
   save_total_limit=2,
   fp16=True,
   report_to="wandb",
   lr_scheduler_type="cosine",
   metric_for_best_model="eval_loss",
   greater_is_better=False,
)

trainer = Trainer(
   model=model,
   args=training_args,
   train_dataset=dataset['train'],
   eval_dataset=dataset['validation'],
   data_collator=default_data_collator,
   tokenizer=processor.tokenizer,
)
trainer.train()

# Kaydedilecek drive yolu
save_path = f"{base_dir}/fine_tuned_model4"

# Model ve tokenizer'ı drive'a kaydet
trainer.save_model(save_path)
processor.save_pretrained(save_path)
print(f"Drive'a kaydedildi: {save_path}")

"""
from transformers import AutoModelForVision2Seq, AutoProcessor
from PIL import Image
import torch

# Google Drive'ı mount et
from google.colab import drive
drive.mount('/content/drive')

model_path = "/content/drive/MyDrive/fine_tuned_model"

# Model ve processor
processor = AutoProcessor.from_pretrained(model_path)
model = AutoModelForVision2Seq.from_pretrained(model_path).to("cuda")
model.eval()

# Test görseli ve soru
image_path = "./military_dataset/Veri-Kumesi_V1-100/Test/A10/71.jpg"
question = "Bu görseldeki askeri hava aracı hangisidir?"

image = Image.open(image_path).convert("RGB")

inputs = processor(images=image, text=question, return_tensors="pt").to("cuda")

with torch.no_grad():
    outputs = model.generate(**inputs, max_new_tokens=50)

answer = processor.tokenizer.decode(outputs[0], skip_special_tokens=True)
print("Modelin cevabı:", answer)
"""
